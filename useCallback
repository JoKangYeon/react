import { render } from "@testing-library/react";
import "./App.css";
import Body from "./component/Body";
import { useState, useEffect, useRef, useCallback } from "react";

const App = () => {
  const test = () => {
    console.log("ddd");
  };

  //useMemo 값을 저장
  /* useCallback */
  // 인자로 전달한 콜백함수 자체를 메모리제이션하는것

  const [number, setNumber] = useState(0);
  const [toggel, setToggel] = useState(false);

  const callBasic = () => {
    console.log("1==>", number);
  };

  const callUseCallback = useCallback(() => {
    console.log("2==>", number);
  }, []);

  useEffect(() => {
    console.log("주소겂이 변경");
  }, [callBasic]);

  useEffect(() => {
    console.log("주소겂이 변경");
  }, [callUseCallback]);

  return (
    <div>
      <div>
        <input type="number" value={number}></input>
        <button onClick={(e) => setNumber(number + 1)}>상승</button>
        <button onClick={(e) => setNumber(number + 1)}>{toggel}</button>
      </div>
      <div>
        <button onClick={callBasic}>함수호출</button>
        <br />
        <button onClick={callUseCallback}>함수호출2</button>
        <br />
      </div>
    </div>
  );

  // <Body />;
};

export default App;

--------------------------------  use함수 총 정리 --------------------------------

import "../common.css";
import { useEffect, useState, useRef, useCallback } from "react";
import Timer from "./Timer";
import Login from "./login/Login.js";

const Body = () => {
  const jobList = ["개발자", "의사", "건물주", "선생님"];

  const [name, setName] = useState("");
  const [job, setJob] = useState(jobList[0]);
  const [gender, setGender] = useState("남성");
  const [submit, setSubmit] = useState(false);
  const nameRef = useRef("");

  const nameUseCallback = useCallback((e) => {
    console.log(e.target.value);
    setName(e.target.value);
  }, []);

  const jobUseCallback = useCallback((e) => {
    setJob(e.target.value);
  }, []);

  const genderUsecallback = useCallback((e) => {
    setGender(e.target.value);
  }, []);

  const submitCheck = () => {
    if (name === "") {
      nameRef.current.focus();
    } else {
      setSubmit(!submit);
    }
  };

  return (
    <div>
      <div>이름</div>
      <div>
        <input onChange={nameUseCallback} type="text" ref={nameRef}></input>
      </div>
      <div>직업</div>
      <div>
        <select onChange={jobUseCallback}>
          {jobList.map((v, i) => {
            return (
              <option key={`list-${i}`} value={v}>
                {v}
              </option>
            );
          })}
        </select>
      </div>
      <div>성별</div>
      <div>
        <input
          onChange={genderUsecallback}
          type="radio"
          name="gender"
          value="남성"
          checked={gender == "남성" ? "checked" : ""}
        ></input>
        남성
        <input
          onChange={genderUsecallback}
          type="radio"
          name="gender"
          value="여성"
          checked={gender == "여성" ? "checked" : ""}
        ></input>
        여성
      </div>
      <button onClick={submitCheck}>제출</button>
      {submit ? (
        <div>
          <div>이름 : {name}</div>
          <div>직업 : {job}</div>
          <div>성별 : {gender}</div>
        </div>
      ) : null}
    </div>
  );
};

export default Body;


